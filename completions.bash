# BASH completion script for diffips
# Generated by pycomplete 0.4.0

_diffips_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--help --loglevel"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _diffips_514eb0e976063d7d_complete diffips
complete -o default -F _diffips_514eb0e976063d7d_complete getips
complete -o default -F _diffips_514eb0e976063d7d_complete getsubnets
complete -o default -F _diffips_514eb0e976063d7d_complete intips
complete -o default -F _diffips_514eb0e976063d7d_complete sortbyips
complete -o default -F _diffips_514eb0e976063d7d_complete sortips
complete -o default -F _diffips_514eb0e976063d7d_complete unzpad
complete -o default -F _diffips_514eb0e976063d7d_complete zpad
complete -o default -F _diffips_514eb0e976063d7d_complete diffips
complete -o default -F _diffips_514eb0e976063d7d_complete getips
complete -o default -F _diffips_514eb0e976063d7d_complete getsubnets
complete -o default -F _diffips_514eb0e976063d7d_complete intips
complete -o default -F _diffips_514eb0e976063d7d_complete sortbyips
complete -o default -F _diffips_514eb0e976063d7d_complete sortips
complete -o default -F _diffips_514eb0e976063d7d_complete unzpad
complete -o default -F _diffips_514eb0e976063d7d_complete zpad




# BASH completion script for difflines
# Generated by pycomplete 0.4.0

_difflines_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--help"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _difflines_514eb0e976063d7d_complete difflines
complete -o default -F _difflines_514eb0e976063d7d_complete intlines
complete -o default -F _difflines_514eb0e976063d7d_complete nsi-render
complete -o default -F _difflines_514eb0e976063d7d_complete difflines
complete -o default -F _difflines_514eb0e976063d7d_complete intlines
complete -o default -F _difflines_514eb0e976063d7d_complete nsi-render




# BASH completion script for nsi-dump-hashes
# Generated by pycomplete 0.4.0

_nsi_dump_hashes_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--help --print-plaintext"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_dump_hashes_514eb0e976063d7d_complete nsi-dump-hashes
complete -o default -F _nsi_dump_hashes_514eb0e976063d7d_complete nthash
complete -o default -F _nsi_dump_hashes_514eb0e976063d7d_complete nsi-dump-hashes
complete -o default -F _nsi_dump_hashes_514eb0e976063d7d_complete nthash




# BASH completion script for nsi-e4l-users
# Generated by pycomplete 0.4.0

_nsi_e4l_users_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--from-clipboard --help --inpath"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_e4l_users_514eb0e976063d7d_complete nsi-e4l-users
complete -o default -F _nsi_e4l_users_514eb0e976063d7d_complete nsi-e4l-users




# BASH completion script for nsi-msf-ips
# Generated by pycomplete 0.4.0

_nsi_msf_ips_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--clipboard-read --help --inpath"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_msf_ips_514eb0e976063d7d_complete nsi-msf-ips
complete -o default -F _nsi_msf_ips_514eb0e976063d7d_complete nsi-msf-ips




# BASH completion script for nsi-nmap
# Generated by pycomplete 0.4.0

_nsi_nmap_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--clipboard --help --no-sort --sep --stdout"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_nmap_514eb0e976063d7d_complete nsi-nmap
complete -o default -F _nsi_nmap_514eb0e976063d7d_complete nsi-nmap-diffports
complete -o default -F _nsi_nmap_514eb0e976063d7d_complete nsi-nmap-ports
complete -o default -F _nsi_nmap_514eb0e976063d7d_complete nsi-nmap-services
complete -o default -F _nsi_nmap_514eb0e976063d7d_complete nsi-nmap
complete -o default -F _nsi_nmap_514eb0e976063d7d_complete nsi-nmap-diffports
complete -o default -F _nsi_nmap_514eb0e976063d7d_complete nsi-nmap-ports
complete -o default -F _nsi_nmap_514eb0e976063d7d_complete nsi-nmap-services




# BASH completion script for nsi-smb-ls
# Generated by pycomplete 0.4.0

_nsi_smb_ls_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--domain --dry-run --echo --force --hashes --help --ippath --loglevel --max-workers --output-dir --password --proxychains --socks-proxy-data --ssh --target --username"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_smb_ls_514eb0e976063d7d_complete nsi-smb-ls
complete -o default -F _nsi_smb_ls_514eb0e976063d7d_complete nsi-smb-shares
complete -o default -F _nsi_smb_ls_514eb0e976063d7d_complete nsi-smb-ls
complete -o default -F _nsi_smb_ls_514eb0e976063d7d_complete nsi-smb-shares




# BASH completion script for nsi-dirb
# Generated by pycomplete 0.4.0

_nsi_dirb_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--dry-run --force --help --input-path --loglevel --no-ssl --output-dir --path --port --randomize --ssh-host --ssh-user --ssl --target --timeout --url"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_dirb_514eb0e976063d7d_complete nsi-dirb
complete -o default -F _nsi_dirb_514eb0e976063d7d_complete nsi-nikto
complete -o default -F _nsi_dirb_514eb0e976063d7d_complete nsi-dirb
complete -o default -F _nsi_dirb_514eb0e976063d7d_complete nsi-nikto




# BASH completion script for nsi-fping-subnets
# Generated by pycomplete 0.4.0

_nsi_fping_subnets_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--cidr-path --echo --from-clipboard --help --loglevel --ssh --target --to-clipboard"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_fping_subnets_514eb0e976063d7d_complete nsi-fping-subnets
complete -o default -F _nsi_fping_subnets_514eb0e976063d7d_complete nsi-fping-subnets




# BASH completion script for nsi-dns-resolve
# Generated by pycomplete 0.4.0

_nsi_dns_resolve_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--bh --csv --dns-server --echo --from-clipboard --help --inpath --json --keep-duplicates --loglevel --max-threads --outpath --ssh --to-clipboard --yaml"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_dns_resolve_514eb0e976063d7d_complete nsi-dns-resolve
complete -o default -F _nsi_dns_resolve_514eb0e976063d7d_complete nsi-dns-resolve




# BASH completion script for nsi-bh-group-members
# Generated by pycomplete 0.4.0

_nsi_bh_group_members_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--admin --csv --enabled --help --inpath --loglevel --outpath --to-clipboard"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-group-members
complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-list-computers
complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-list-groups
complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-list-users
complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-user-groups
complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-group-members
complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-list-computers
complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-list-groups
complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-list-users
complete -o default -F _nsi_bh_group_members_514eb0e976063d7d_complete nsi-bh-user-groups




# BASH completion script for nsi-whois
# Generated by pycomplete 0.4.0

_nsi_whois_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--from-clipboard --help --inpath --loglevel --max-workers --outdir"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_whois_514eb0e976063d7d_complete nsi-whois
complete -o default -F _nsi_whois_514eb0e976063d7d_complete nsi-whois




# BASH completion script for nsi-ftp
# Generated by pycomplete 0.4.0

_nsi_ftp_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--help --loglevel"

        case "$com" in

            (anon)
            opts="--domain --echo --help --ippath --max-workers --output-dir --password --ssh --target --username"
            ;;

        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms="anon"

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_ftp_514eb0e976063d7d_complete nsi-ftp
complete -o default -F _nsi_ftp_514eb0e976063d7d_complete nsi-ftp




# BASH completion script for nsi-secretsdump
# Generated by pycomplete 0.4.0

_nsi_secretsdump_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--domain --echo --hashes --help --ippath --loglevel --max-workers --output-dir --password --proxychains --sam-path --ssh --target --username"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_secretsdump_514eb0e976063d7d_complete nsi-secretsdump
complete -o default -F _nsi_secretsdump_514eb0e976063d7d_complete nsi-secretsdump




# BASH completion script for nsi-ntlm-extract
# Generated by pycomplete 0.4.0

_nsi_ntlm_extract_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--admins --domain-admins --hashes --help --include-hashes --loglevel --potfile --table --to-clipboard"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_ntlm_extract_514eb0e976063d7d_complete nsi-ntlm-extract
complete -o default -F _nsi_ntlm_extract_514eb0e976063d7d_complete nsi-ntlm-resolve
complete -o default -F _nsi_ntlm_extract_514eb0e976063d7d_complete nsi-ntlm-extract
complete -o default -F _nsi_ntlm_extract_514eb0e976063d7d_complete nsi-ntlm-resolve




# BASH completion script for nsi-filesystem-meta
# Generated by pycomplete 0.4.0

_nsi_filesystem_meta_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--case-sensitive --dry-run --echo --help --keep-empty --loglevel --max-examples --min-mtime --output-dir --skip-dir --ssh --sub-dir"

        case "$com" in



        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms=""

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_filesystem_meta_514eb0e976063d7d_complete nsi-filesystem-meta
complete -o default -F _nsi_filesystem_meta_514eb0e976063d7d_complete nsi-filesystem-meta




# BASH completion script for nsi-nexpose
# Generated by pycomplete 0.4.0

_nsi_nexpose_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--help --loglevel"

        case "$com" in

            (check-config)
            opts="--config-path --config-path --help"
            ;;

            (download-report)
            opts="--config-path --force --help --keep --name --output-path"
            ;;

            (init-config)
            opts="--help"
            ;;

            (list-scan-engines)
            opts="--config-path --help"
            ;;

            (list-scan-templates)
            opts="--config-path --help"
            ;;

            (new-site)
            opts="--config-path --help"
            ;;

            (report-stats)
            opts="--help --output-path"
            ;;

            (start-scan)
            opts="--config-path --force --help --keep --name --output-path"
            ;;

        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms="check-config download-report init-config list-scan-engines list-scan-templates new-site report-stats start-scan"

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_nexpose_514eb0e976063d7d_complete nsi-nexpose
complete -o default -F _nsi_nexpose_514eb0e976063d7d_complete nsi-nexpose




# BASH completion script for nsi-cme
# Generated by pycomplete 0.4.0

_nsi_cme_514eb0e976063d7d_complete()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--help --loglevel"

        case "$com" in

            (smb)
            opts="--domain --echo --force --from-clipboard --help --input-path --ip-block-size --max-workers --no-ansi --password --ssh --target --timeout --user"
            ;;

        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms="smb"

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _nsi_cme_514eb0e976063d7d_complete nsi-cme
complete -o default -F _nsi_cme_514eb0e976063d7d_complete nsi-cme




